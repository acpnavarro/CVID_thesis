#####count_table#####
tpm_countTable= read.xlsx("/media/anna/4TB_2/Anna_Navarro/tpm_countTable.xlsx", rowNames=TRUE)

df_AN<-tpm_countTable[, grep("^AN", names(tpm_countTable))]

df_clinical <- read.xlsx("/media/anna/4TB_2/Anna_Navarro/table_AN.xlsx", rowNames=FALSE)

tdf_AN=as.data.frame(t(df_AN))%>%
  tibble::rownames_to_column("Sample")%>%
  dplyr::inner_join(.,df_clinical)%>%
  tibble::column_to_rownames("Sample")%>%
  dplyr::select(Condition,everything())

tdf_AN$Condition=as.factor(tdf_AN$Condition)


## Scale and Center the data
tdf_AN.scale <- base::scale(base::data.matrix(tdf_AN[,2:length(tdf_AN)]), center = T, scale = T)


## Condition as factor
y_tdf_AN <- factor(tdf_AN$Condition)

# LASSO
## perform k-fold cross-validation to find optimal lambda value
set.seed(1234)
library(glmnet)
?glmnet
cv_model <- glmnet::cv.glmnet(tdf_AN.scale, y_tdf_AN, alpha = 1, family = "binomial", measure = "class")
## find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min

## get coeficients
z <- stats::coef(cv_model, s= best_lambda)
Genes <- c(0, z@Dimnames[[1]][z@i])
z_df <- base::data.frame(coef = z@i, beta =  z@x, Genes = Genes)
z_df$Genes

genes<-as.data.frame(z_df$Genes)
genes<-as.data.frame(genes[-1,1])

####Split the data
set.seed(1234)
library(splitTools)
inds <- splitTools::partition(tdf_AN$Condition, p = c(train = 0.7, test = 0.3))
train <-tdf_AN[inds$train, ]
test <- tdf_AN[inds$test, ]

#Logistic Regression
set.seed(1234)
new_train<- train[, (names(train) %in% genes[,1])]
Condition <- train$Condition
new_train = cbind(new_train,Condition)
fit <- glm(Condition~.,data=new_train,family=binomial)
summary(fit)
?glm


new_test<- test[, (names(test) %in% genes[,1])]
Condition <- test$Condition
new_test= cbind(new_test,Condition)
predict(fit, test, type="response")
